)
)
rlang::last_trace()
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-stringr::str_glue("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
db_connect_str
?URLencode()
rlang::last_trace()
mongo_db_connection<-function(){
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<-config$mongo_db_password
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-stringr::str_glue("mongodb+srv://{user_mongo}:{password_mongo}@{cluster}/{db}?retryWrites=true&w=majority")
connection<-collections %>%
purrr::map(
.x=.
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
return(
list(user_base = connection[[1]],
logins = connection[[2]]
)
)
}
connection<-collections %>%
purrr::map(
.x=.,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
library(tm)
library(mongolite)
library(rsconnect)
library(wordcloud)
library(SnowballC)
library(readtext)
library(ggplot2)
library(stringr)
library(tidytext)
library(tokenizers)
library(textdata)
library(RColorBrewer)
library(data.table)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(DT)
library(quanteda)
library(topicmodels)
library(text2vec)
library(lda)
library(readr)
library(textmineR)
library(shinyauthr)
library(config)
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-stringr::str_glue("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
library(tm)
library(mongolite)
library(rsconnect)
library(wordcloud)
library(SnowballC)
library(readtext)
library(ggplot2)
library(stringr)
library(tidytext)
library(tokenizers)
library(textdata)
library(RColorBrewer)
library(data.table)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(DT)
library(quanteda)
library(topicmodels)
library(text2vec)
library(lda)
library(readr)
library(textmineR)
library(shinyauthr)
library(config)
collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
library(mongolite)
mongo_db_user <- "kokonyaedwin"
mongo_db_password <- "wakhisi@1974"
mongo_database <- "swahili_insha"
mongo_collection <- "all texts"
mongo_clustername <- "insha.bkrf4yr.mongodb.net"
# the following is the connection string for an Atlas online MongoDB cluster
url_path = sprintf("mongodb+srv://%s:%s@%s/admin", mongo_db_user, mongo_db_password, mongo_clustername)
mongo_db <- mongo(collection = mongo_collection, db = mongo_database, url = url_path, verbose = TRUE)
mongo_db_password<- URLencode(mongo_db_password)
# the following is the connection string for an Atlas online MongoDB cluster
url_path = sprintf("mongodb+srv://%s:%s@%s/admin", mongo_db_user, mongo_db_password, mongo_clustername)
mongo_db <- mongo(collection = mongo_collection, db = mongo_database, url = url_path, verbose = TRUE)
library(mongolite)
mongo_db_user <- "Edu"
mongo_db_password <- "kokonya20"
mongo_database <- "swahili_insha"
mongo_collection <- "all texts"
mongo_clustername <- "insha.bkrf4yr.mongodb.net"
# the following is the connection string for an Atlas online MongoDB cluster
url_path = sprintf("mongodb+srv://%s:%s@%s/admin", mongo_db_user, mongo_db_password, mongo_clustername)
mongo_db <- mongo(collection = mongo_collection, db = mongo_database, url = url_path, verbose = TRUE)
data <- data.frame(Date = c("2020-04-21", "2020-04-20"), Returns = c(0.05, 0.02))
mongo_db$insert(data)
rm(mongo_db) # disconnection
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-stringr::str_glue("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
rlang::last_trace()
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-stringr::str_glue("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
default:
mongo_db_user: "Edu"
# another way to connect
options(mongodb=list(
"cluster"="insha",
"host"="bkrf4yr.mongodb.net",
"username"="Edu",
"password"= "kokonya20"
))
databaseName<-"swahili_texts"
collectionName<-"trial"
#saving data to the mongodb database
saveData<- function(data){
#connect to the database
db<-mongo(collection = collectionName,
url<-sprintf(
"mongodb+srv://%s:%s@%s-%s/%s?retryWrites=true&w=majority",
options()$mongodb$username,
options()$mongodb$password,
options()$mongodb$cluster,
options()$mongodb$host,
databaseName))
#insert the data into the mongo collection as a data frame
data <- as.data.frame(data)
db$insert(data)
}
# how to load data from the database into the shinyapp
loadData<- function(){
# connect to the database
db<- mongo(collection = collectionName,
url = sprintf(
"mongodb+srv://%s:%s@%s/%s",
options()$mongodb$username,
options()$mongodb$password,
options()$mongodb$cluster,
options()$mongodb$host,
databaseName))
#read all entries
data_output<-db$find()
data_output
}
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-stringr::str_glue("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
rlang::last_trace()
db_connect_str<-sprintf("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
mongo_db_user <- "Edu"
mongo_db_password <- "kokonya20"
mongo_database <- "swahili_insha"
mongo_collection <- "trial"
mongo_clustername <- "insha.bkrf4yr.mongodb.net"
# the following is the connection string for an Atlas online MongoDB cluster
url_path = sprintf("mongodb+srv://%s:%s@%s/admin", mongo_db_user, mongo_db_password, mongo_clustername)
mongo_db <- mongo(collection = mongo_collection, db = mongo_database, url = url_path, verbose = TRUE)
data <- data.frame(Date = c("2020-04-21", "2020-04-20"), Returns = c(0.05, 0.02))
mongo_db$insert(data)
mongo_db_user <- "Edu"
mongo_db_password <- "kokonya20"
mongo_database <- "swahili_insha"
mongo_collection <- "trial"
mongo_clustername <- "insha.bkrf4yr.mongodb.net"
# the following is the connection string for an Atlas online MongoDB cluster
url_path = sprintf("mongodb+srv://%s:%s@%s/admin", mongo_db_user, mongo_db_password, mongo_clustername)
mongo_db <- mongo(collection = mongo_collection, db = mongo_database, url = url_path, verbose = TRUE)
data <- data.frame(Date = c("2020-04-21", "2020-04-20"), Returns = c(0.05, 0.02))
mongo_db$insert(data)
shiny::runApp()
shiny::runApp()
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-sprintf("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
return(
list(user_base = connection[[1]],
logins = connection[[2]]
)
)
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-sprintf("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
db_connect_str<-stringr::str_glue("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
connection<-collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
return(
list(user_base = connection[[1]],
logins = connection[[2]]
)
)
rlang::last_trace()
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-stringr::str_glue("mongodb+srv://<user_mongo>:<password_mongo>@cluster/?retryWrites=true&w=majority")
connection<-collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
rlang::last_trace()
connection<-collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-stringr::str_glue("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
connection<-collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
install.packages(purr)
config <- config::get()
install.packages(purrr)
install.packages("purrr")
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
shiny::runApp()
install.packages("purrr")
install.packages("purrr")
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
library(tidyverse)
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- URLencode(config$mongo_db_password)
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-stringr::str_glue("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
connection<-collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
library(purrr)
connection<-collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
rlang::last_trace()
shiny::runApp()
library(tidyverse)
library(purrr)
config <- config::get()
user_mongo<-config$mongo_db_user
password_mongo<- config$mongo_db_password
cluster<-config$mongo_clustername
db<-config$user_db
collections<-config$collections_user %>%
stringr::str_split(' ') %>%
unlist()
db_connect_str<-stringr::str_glue("mongodb+srv://<user_mongo>:<password_mongo>@<cluster>/<db>?retryWrites=true&w=majority")
connection<-collections %>%
purrr::map(
.x = .,
~mongolite::mongo(
collection = .x,
db = db,
url = db_connect_str
)
)
mongo_db_user <- "Edu"
mongo_db_password <- "kokonya20"
mongo_database <- "swahili_insha"
mongo_collection <- "trial"
mongo_clustername <- "insha.bkrf4yr.mongodb.net"
# the following is the connection string for an Atlas online MongoDB cluster
url_path = sprintf("mongodb+srv://%s:%s@%s/admin", mongo_db_user, mongo_db_password, mongo_clustername)
mongo_db <- mongo(collection = mongo_collection, db = mongo_database, url = url_path, verbose = TRUE)
data <- data.frame(Date = c("2020-04-21", "2020-04-20"), Returns = c(0.05, 0.02))
mongo_db$insert(data)
rm(mongo_db) # disconnection
shiny::runApp()
runApp()
runApp()
library(RSQLite)
shiny::runApp()
runApp()
?useShinyjs
shiny::runApp()
# Function to extract the topic based on the file name
getTopic <- function(file_name) {
if (grepl("\\_siasa\\.", file_name, ignore.case = TRUE)) {
return("Politics")
} else if (grepl("\\_uharakati\\.", file_name, ignore.case = TRUE)) {
return("Activism")
} else if (grepl("\\_afya\\.", file_name, ignore.case = TRUE)) {
return("Healthcare")
} else if (grepl("\\_fedha\\.", file_name, ignore.case = TRUE)) {
return("Finance")
} else if (grepl("\\_ukulima\\.", file_name, ignore.case = TRUE)) {
return("Agriculture")
} else if (grepl("\\_teknolojia\\.", file_name, ignore.case = TRUE)) {
return("Technology")
} else {
return("Other")
}
}
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
library(shinyjs)
library(shinyauthr)
shiny::runApp()
